version: '3.8'

services:
  # PostgreSQL Database with professional setup
  db:
    image: postgres:15-alpine
    container_name: testdriven_db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-users_dev}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-users_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app_network
    restart: unless-stopped

  # Backend API Service with professional database setup
  backend:
    build:
      context: .
      dockerfile: ./services/users/Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: testdriven_backend
    environment:
      # Flask Configuration
      FLASK_APP: project/__init__.py
      FLASK_ENV: ${FLASK_ENV:-development}
      APP_SETTINGS: ${APP_SETTINGS:-project.config.DevelopmentConfig}
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      
      # Database Configuration
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-users_dev}
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-users_dev}
      
      # Application Configuration
      API_PORT: 5001
      API_HOST: 0.0.0.0
      DEBUG: ${DEBUG:-False}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    
    ports:
      - "${API_PORT:-5001}:5001"

    depends_on:
      db:
        condition: service_healthy

    volumes:
      # Only mount logs directory, not the entire app directory
      # This preserves the /usr/src/app/root_migrations directory from the Docker image
      - ./services/users/logs:/usr/src/app/logs

    networks:
      - app_network
    
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service (optional)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:5001
    container_name: testdriven_frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5001}
      REACT_APP_ENV: ${REACT_APP_ENV:-development}
    ports:
      - "${FRONTEND_PORT:-3001}:80"
    depends_on:
      - backend
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Adminer for database management (optional)
  adminer:
    image: adminer:latest
    container_name: testdriven_adminer
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - app_network
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: db

volumes:
  postgres_data:
    driver: local

networks:
  app_network:
    driver: bridge

